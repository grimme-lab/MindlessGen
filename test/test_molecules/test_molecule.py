from pathlib import Path
import numpy as np
import pytest
from mindlessgen.molecules.molecule import Molecule, ati_to_atlist, atlist_to_ati  # type: ignore


# load the molecule: C2H4N1O1Au1
@pytest.fixture
def mol_C2H4N1O1Au1() -> Molecule:
    """
    Load the molecule C2H4N1O1Au1 from fixtues/C2H4N1O1Au1.xyz.
    """
    mol = Molecule("C2H4N1O1Au1")
    # get the Path of this file
    testsdir = Path(__file__).resolve().parents[1]
    xyz_file = testsdir / "fixtures/C2H4N1O1Au1.xyz"
    mol.read_xyz_from_file(xyz_file)
    with open(testsdir / "fixtures/C2H4N1O1Au1.CHRG", encoding="utf8") as f:
        mol.charge = int(f.read())
    mol.uhf = 0
    return mol


@pytest.mark.parametrize(
    "name_value, expected_exception",
    [
        ("new_molecule", None),  # Valid string
        (123, TypeError),  # Invalid type
    ],
)
def test_name_property(name_value, expected_exception):
    mol = Molecule()
    if expected_exception:
        with pytest.raises(expected_exception):
            mol.name = name_value
    else:
        mol.name = name_value
        assert mol.name == name_value


@pytest.mark.parametrize(
    "value, expected_exception",
    [
        (3, None),  # Valid value
        (-1, ValueError),  # Invalid value
        ("three", TypeError),  # Invalid type
    ],
)
def test_num_atoms_property(value, expected_exception):
    mol = Molecule()
    if expected_exception:
        with pytest.raises(expected_exception):
            mol.num_atoms = value
    else:
        mol.num_atoms = value
        assert mol.num_atoms == value


@pytest.mark.parametrize(
    "value, expected_exception",
    [
        (1, None),  # Valid value
        ("positive", TypeError),  # Invalid type
    ],
)
def test_charge_property(value, expected_exception):
    mol = Molecule()
    if expected_exception:
        with pytest.raises(expected_exception):
            mol.charge = value
    else:
        mol.charge = value
        assert mol.charge == value


@pytest.mark.parametrize(
    "value, expected_exception",
    [
        (2, None),  # Valid value
        ("two", TypeError),  # Invalid type
    ],
)
def test_uhf_property(value, expected_exception):
    mol = Molecule()
    if expected_exception:
        with pytest.raises(expected_exception):
            mol.uhf = value
    else:
        mol.uhf = value
        assert mol.uhf == value


@pytest.mark.parametrize(
    "xyz_value, expected_exception",
    [
        (np.array([[0.0, 0.0, 0.0], [1.0, 0.0, 0.0]]), None),  # Valid array
        (
            [[0.0, 0.0, 0.0], [1.0, 0.0, 0.0]],
            TypeError,
        ),  # Invalid type
        (
            np.array([[0.0, 0.0]]),
            ValueError,
        ),  # Invalid shape
    ],
)
def test_xyz_property(xyz_value, expected_exception):
    mol = Molecule()
    if expected_exception:
        with pytest.raises(expected_exception):
            mol.xyz = xyz_value
    else:
        mol.num_atoms = xyz_value.shape[0]  # Set num_atoms based on xyz array shape
        mol.xyz = xyz_value
        np.testing.assert_array_equal(mol.xyz, xyz_value)


def test_atlist_property():
    mol = Molecule()
    # create an empty array with dimension 1 and length 102
    mol.atlist = np.zeros(102, dtype=int)
    assert mol.atlist.shape == (102,)

    # set the first element to 4 and the sixth element to 2
    mol.atlist[0] = 4
    mol.atlist[5] = 2

    # generate the sum formula, which should be 'C2H4'
    assert mol.sum_formula() == "C2H4"


@pytest.mark.parametrize(
    "ati_value, num_atoms_value, expected_exception",
    [
        (np.array([1, 6]), 2, None),  # Valid array
        ([1, 6], 2, TypeError),  # Invalid type (list instead of numpy array)
        (np.array([1, 6, 8]), 2, ValueError),  # Invalid shape (length mismatch)
    ],
)
def test_ati_property(ati_value, num_atoms_value, expected_exception):
    mol = Molecule()
    mol.num_atoms = num_atoms_value
    if expected_exception:
        with pytest.raises(expected_exception):
            mol.ati = ati_value
    else:
        mol.ati = ati_value
        np.testing.assert_array_equal(mol.ati, ati_value)


@pytest.mark.parametrize(
    "filename, num_atoms, charge, expected_exception",
    [
        ("test_molecule", 2, 1, None),  # Valid file and data
        ("invalid_molecule", None, None, FileNotFoundError),  # Missing file
        ("corrupted_molecule", None, None, ValueError),  # Invalid data
    ],
)
def test_read_mol_from_file(tmp_path, filename, num_atoms, charge, expected_exception):
    if filename == "test_molecule":
        # Create valid XYZ and CHRG files for testing
        xyz_content = "2\nGenerated by mindlessgen-v1.0\nH 0.0 0.0 0.0\nO 1.0 0.0 0.0\n"
        chrg_content = "1\n"
    elif filename == "corrupted_molecule":
        # Create an invalid XYZ file
        xyz_content = "Invalid content\n"
        chrg_content = "invalid\n"
    else:
        # Simulate missing file by skipping file creation
        xyz_content = None
        chrg_content = None

    if xyz_content and chrg_content:
        xyz_file = tmp_path / f"{filename}.xyz"
        chrg_file = tmp_path / f"{filename}.CHRG"
        xyz_file.write_text(xyz_content)
        chrg_file.write_text(chrg_content)

    if filename == "corrupted_molecule":
        print(f"expected_exception: {expected_exception}")
        with pytest.raises(expected_exception):
            Molecule.read_mol_from_file(str(tmp_path / xyz_file))
    elif filename == "invalid_molecule":
        print(f"expected_exception: {expected_exception}")
        with pytest.raises(expected_exception):
            # load from "filename", which does not exist -> FileNotFoundError
            Molecule.read_mol_from_file(str(tmp_path / filename))
    else:
        mol = Molecule.read_mol_from_file(str(tmp_path / xyz_file))
        assert mol.num_atoms == num_atoms
        assert mol.charge == charge
        assert mol.uhf == 0
        np.testing.assert_array_equal(mol.ati, np.array([0, 7]))
        assert mol.atlist[0] == 1
        assert mol.atlist[7] == 1
        np.testing.assert_array_equal(
            mol.xyz, np.array([[0.0, 0.0, 0.0], [1.0, 0.0, 0.0]])
        )


def test_copy_method():
    mol = Molecule(name="original")
    mol.num_atoms = 2
    mol.charge = 0
    mol.uhf = 1
    mol.atlist = np.array([1, 1, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int)
    mol.xyz = np.array([[0.0, 0.0, 0.0], [1.0, 0.0, 0.0]])

    mol_copy = mol.copy()

    assert mol_copy.name == mol.name
    assert mol_copy.num_atoms == mol.num_atoms
    assert mol_copy.charge == mol.charge
    assert mol_copy.uhf == mol.uhf
    np.testing.assert_array_equal(mol_copy.atlist, mol.atlist)
    np.testing.assert_array_equal(mol_copy.xyz, mol.xyz)


# TODO: Fix this test
# @pytest.mark.parametrize(
#     "filename, xyz_value, charge_value, expected_exception",
#     [
#         ("molecule", np.array([[0.0, 0.0, 0.0], [1.0, 0.0, 0.0]]), 1, None),
#         (None, np.array([[0.0, 0.0, 0.0]]), None, ValueError),  # Missing num_atoms
#     ],
# )
# def test_write_xyz_to_file(
#     tmp_path, filename, xyz_value, charge_value, expected_exception
# ):
#     mol = Molecule(name="test")
#     mol.num_atoms = xyz_value.shape[0]
#     mol.xyz = xyz_value
#     mol.charge = charge_value
#     mol.ati = np.array([0, 7])
#
#     if expected_exception:
#         with pytest.raises(expected_exception):
#             mol.write_xyz_to_file(str(tmp_path / filename))
#     else:
#         mol.write_xyz_to_file(str(tmp_path / filename))
#         assert (tmp_path / f"{filename}.xyz").exists()


def test_set_name_from_formula():
    mol = Molecule()
    mol.atlist = np.zeros(102, dtype=int)
    mol.atlist[5] = 2  # C
    mol.atlist[0] = 4  # H

    mol.set_name_from_formula()
    assert "C2H4_" in mol.name  # Ensure the generated name includes the correct formula


def test_atlist_to_ati():
    """
    Test the atlist_to_ati function.
    """
    atlist = np.zeros(103, dtype=int)
    atlist[0] = 1
    atlist[4] = 2
    atlist[5] = 2
    atlist[6] = 1
    atlist[7] = 1
    atlist[43] = 2
    atlist[58] = 1

    ati = atlist_to_ati(atlist)
    np.testing.assert_array_equal(ati, np.array([0, 4, 4, 5, 5, 6, 7, 43, 43, 58]))


def test_ati_to_atlist():
    """
    Test the ati_to_atlist function.
    """
    ati = np.array([0, 4, 4, 5, 5, 6, 7, 43, 43, 58])

    atlist = ati_to_atlist(ati)
    expected_atlist = np.zeros(103, dtype=int)
    expected_atlist[0] = 1
    expected_atlist[4] = 2
    expected_atlist[5] = 2
    expected_atlist[6] = 1
    expected_atlist[7] = 1
    expected_atlist[43] = 2
    expected_atlist[58] = 1

    np.testing.assert_array_equal(atlist, expected_atlist)
